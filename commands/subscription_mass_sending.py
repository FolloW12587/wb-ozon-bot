from sqlalchemy.ext.asyncio import AsyncSession

from db.repository.user import UserRepository
from db.base import get_session

from commands.send_message import mass_sending_message
from keyboards import create_reply_start_kb, create_go_to_subscription_kb

from logger import logger


async def subscription_mass_sending():
    logger.info("Started subscription mass sending")
    async for session in get_session():
        repo = UserRepository(session)
        active_users = await repo.get_active()
        active_user_ids = [active_user.tg_id for active_user in active_users]
        logger.info("Found %s active users", len(active_user_ids))
        text = """*‚ö†Ô∏è –í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ*

–ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º *–ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 200 —Ä—É–±. –≤ –º–µ—Å—è—Ü*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

–î–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ *–≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω* –∏ *–≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏* –±—ã–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã, –Ω–æ —á–µ—Ä–µ–∑ *7 –¥–Ω–µ–π* —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.

*üí° –ß—Ç–æ –±—É–¥–µ—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:*

‚Äî –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Äî –î–æ—Å—Ç—É–ø –∫ –≥—Ä–∞—Ñ–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
‚Äî –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ 

*üîÅ –ß—Ç–æ –±—É–¥–µ—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é:*

‚Äî –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –∏ –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ —Å—Ç–∞–Ω—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
‚Äî –í—Å–µ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—Å—è—Ç—Å—è –Ω–∞ –ú–æ—Å–∫–≤—É, –∞ —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞

üìà –≠—Ç–∞ –º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ *–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è*. –í –±—É–¥—É—â–µ–º –º—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë *–Ω–æ–≤—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏* –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è"""
        kb = create_reply_start_kb()

        logger.info("Sending...")
        results = await mass_sending_message(
            active_user_ids, text, kb.as_markup(resize_keyboard=True)
        )

        await set_users_as_inactive(active_user_ids, results, session)


async def subscription_is_about_to_end(
    user_ids: list[int], session: AsyncSession, days=5
):
    days_str = "–¥–Ω–µ–π"
    if days == 1:
        days_str = "–¥–µ–Ω—å"
    elif 2 <= days <= 4:
        days_str = "–¥–Ω—è"

    text = f"""*‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days} {days_str}*

–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º ‚Äî *–ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µüëá*"""
    kb = create_go_to_subscription_kb()

    results = await mass_sending_message(user_ids, text, kb.as_markup())
    await set_users_as_inactive(user_ids, results, session)


async def set_users_as_inactive(
    user_ids: list[int], activity_labels: list[bool], session: AsyncSession
):
    logger.info("Started set users as inactive function")

    inactive_users = []
    for i, user_id in enumerate(user_ids):
        if not activity_labels[i]:
            inactive_users.append(user_id)

    if not inactive_users:
        logger.info("No inactive users")
        return

    logger.info("Found %s inactive users out of %s", len(inactive_users), len(user_ids))
    async with session:
        repo = UserRepository(session)
        logger.info("Updating...")
        await repo.set_as_inactive(inactive_users)
